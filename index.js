// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var Transform, getPathValue, penman, stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require('stream');

  getPathValue = require('chai/lib/chai/utils/getPathValue');

  Transform = (function(_super) {
    __extends(Transform, _super);

    function Transform() {
      Transform.__super__.constructor.apply(this, arguments);
      this._writableState.objectMode = true;
      this._readableState.objectMode = false;
    }

    return Transform;

  })(stream.Transform);

  penman = function(obj) {
    var row;

    if (obj == null) {
      obj = {};
    }
    row = penman.queue.map(function(_arg) {
      var defaults, key, path, transform, value;

      key = _arg.key, path = _arg.path, defaults = _arg.defaults, transform = _arg.transform;
      value = getPathValue(path, obj) || defaults;
      if (transform != null) {
        value = transform(value);
      }
      return value;
    });
    return row.join(penman._delimiter);
  };

  penman.getPathValue = getPathValue;

  penman._delimiter = ',';

  penman.queue = [];

  penman.map = function(key, path, defaults, transform) {
    if (key == null) {
      key = '';
    }
    if (path == null) {
      path = '';
    }
    if (defaults == null) {
      defaults = '';
    }
    penman.queue.push({
      key: key,
      path: path,
      defaults: defaults,
      transform: transform
    });
    return penman;
  };

  penman.delimiter = function(delimiter) {
    if (delimiter != null) {
      penman._delimiter = delimiter;
      return penman;
    } else {
      return penman._delimiter;
    }
  };

  penman.stream = function(options) {
    var s;

    s = new Transform(options);
    s._transform = function(chunk, enc, done) {
      if (chunk == null) {
        chunk = {};
      }
      s.push(penman(chunk));
      return done();
    };
    return s;
  };

  module.exports = penman;

}).call(this);
